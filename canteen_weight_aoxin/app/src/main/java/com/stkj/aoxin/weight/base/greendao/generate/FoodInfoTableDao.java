package com.stkj.aoxin.weight.base.greendao.generate;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.stkj.aoxin.weight.setting.model.FoodInfoTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD_INFO_TABLE".
*/
public class FoodInfoTableDao extends AbstractDao<FoodInfoTable, String> {

    public static final String TABLENAME = "FOOD_INFO_TABLE";

    /**
     * Properties of entity FoodInfoTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TenantId = new Property(1, String.class, "tenantId", false, "TENANT_ID");
        public final static Property DeleteFlag = new Property(2, String.class, "deleteFlag", false, "DELETE_FLAG");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateUser = new Property(4, String.class, "createUser", false, "CREATE_USER");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property UpdateUser = new Property(6, String.class, "updateUser", false, "UPDATE_USER");
        public final static Property RestaurantId = new Property(7, String.class, "restaurantId", false, "RESTAURANT_ID");
        public final static Property CategoryMap = new Property(8, String.class, "categoryMap", false, "CATEGORY_MAP");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Imgpath = new Property(10, String.class, "imgpath", false, "IMGPATH");
        public final static Property DeviceId = new Property(11, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property PricingMethod = new Property(12, int.class, "pricingMethod", false, "PRICING_METHOD");
        public final static Property PricingUnit = new Property(13, String.class, "pricingUnit", false, "PRICING_UNIT");
        public final static Property Type = new Property(14, int.class, "type", false, "TYPE");
        public final static Property UnitPriceMoney_cent = new Property(15, long.class, "unitPriceMoney_cent", false, "UNIT_PRICE_MONEY_CENT");
        public final static Property UnitPriceMoney_currency = new Property(16, String.class, "unitPriceMoney_currency", false, "UNIT_PRICE_MONEY_CURRENCY");
        public final static Property UnitPriceMoney_amount = new Property(17, double.class, "unitPriceMoney_amount", false, "UNIT_PRICE_MONEY_AMOUNT");
        public final static Property UnitPriceMoney_centFactor = new Property(18, String.class, "unitPriceMoney_centFactor", false, "UNIT_PRICE_MONEY_CENT_FACTOR");
        public final static Property Sort = new Property(19, int.class, "sort", false, "SORT");
        public final static Property HasChoose = new Property(20, int.class, "hasChoose", false, "HAS_CHOOSE");
        public final static Property IsSelected = new Property(21, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property Status = new Property(22, int.class, "status", false, "STATUS");
        public final static Property TemplateId = new Property(23, String.class, "templateId", false, "TEMPLATE_ID");
        public final static Property Remark = new Property(24, String.class, "remark", false, "REMARK");
        public final static Property InputGoodsInitPrice = new Property(25, String.class, "inputGoodsInitPrice", false, "INPUT_GOODS_INIT_PRICE");
        public final static Property StandardGoodsCount = new Property(26, String.class, "standardGoodsCount", false, "STANDARD_GOODS_COUNT");
        public final static Property WeightGoodsCount = new Property(27, String.class, "weightGoodsCount", false, "WEIGHT_GOODS_COUNT");
    }


    public FoodInfoTableDao(DaoConfig config) {
        super(config);
    }
    
    public FoodInfoTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD_INFO_TABLE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TENANT_ID\" TEXT," + // 1: tenantId
                "\"DELETE_FLAG\" TEXT," + // 2: deleteFlag
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"CREATE_USER\" TEXT," + // 4: createUser
                "\"UPDATE_TIME\" TEXT," + // 5: updateTime
                "\"UPDATE_USER\" TEXT," + // 6: updateUser
                "\"RESTAURANT_ID\" TEXT," + // 7: restaurantId
                "\"CATEGORY_MAP\" TEXT," + // 8: categoryMap
                "\"NAME\" TEXT," + // 9: name
                "\"IMGPATH\" TEXT," + // 10: imgpath
                "\"DEVICE_ID\" TEXT," + // 11: deviceId
                "\"PRICING_METHOD\" INTEGER NOT NULL ," + // 12: pricingMethod
                "\"PRICING_UNIT\" TEXT," + // 13: pricingUnit
                "\"TYPE\" INTEGER NOT NULL ," + // 14: type
                "\"UNIT_PRICE_MONEY_CENT\" INTEGER NOT NULL ," + // 15: unitPriceMoney_cent
                "\"UNIT_PRICE_MONEY_CURRENCY\" TEXT," + // 16: unitPriceMoney_currency
                "\"UNIT_PRICE_MONEY_AMOUNT\" REAL NOT NULL ," + // 17: unitPriceMoney_amount
                "\"UNIT_PRICE_MONEY_CENT_FACTOR\" TEXT," + // 18: unitPriceMoney_centFactor
                "\"SORT\" INTEGER NOT NULL ," + // 19: sort
                "\"HAS_CHOOSE\" INTEGER NOT NULL ," + // 20: hasChoose
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 21: isSelected
                "\"STATUS\" INTEGER NOT NULL ," + // 22: status
                "\"TEMPLATE_ID\" TEXT," + // 23: templateId
                "\"REMARK\" TEXT," + // 24: remark
                "\"INPUT_GOODS_INIT_PRICE\" TEXT," + // 25: inputGoodsInitPrice
                "\"STANDARD_GOODS_COUNT\" TEXT," + // 26: standardGoodsCount
                "\"WEIGHT_GOODS_COUNT\" TEXT);"); // 27: weightGoodsCount
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_DELETE_FLAG ON \"FOOD_INFO_TABLE\"" +
                " (\"DELETE_FLAG\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_CATEGORY_MAP ON \"FOOD_INFO_TABLE\"" +
                " (\"CATEGORY_MAP\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_NAME ON \"FOOD_INFO_TABLE\"" +
                " (\"NAME\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_PRICING_METHOD ON \"FOOD_INFO_TABLE\"" +
                " (\"PRICING_METHOD\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_TYPE ON \"FOOD_INFO_TABLE\"" +
                " (\"TYPE\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_SORT ON \"FOOD_INFO_TABLE\"" +
                " (\"SORT\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_HAS_CHOOSE ON \"FOOD_INFO_TABLE\"" +
                " (\"HAS_CHOOSE\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_FOOD_INFO_TABLE_STATUS ON \"FOOD_INFO_TABLE\"" +
                " (\"STATUS\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD_INFO_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FoodInfoTable entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tenantId = entity.getTenantId();
        if (tenantId != null) {
            stmt.bindString(2, tenantId);
        }
 
        String deleteFlag = entity.getDeleteFlag();
        if (deleteFlag != null) {
            stmt.bindString(3, deleteFlag);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(5, createUser);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(7, updateUser);
        }
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(8, restaurantId);
        }
 
        String categoryMap = entity.getCategoryMap();
        if (categoryMap != null) {
            stmt.bindString(9, categoryMap);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String imgpath = entity.getImgpath();
        if (imgpath != null) {
            stmt.bindString(11, imgpath);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(12, deviceId);
        }
        stmt.bindLong(13, entity.getPricingMethod());
 
        String pricingUnit = entity.getPricingUnit();
        if (pricingUnit != null) {
            stmt.bindString(14, pricingUnit);
        }
        stmt.bindLong(15, entity.getType());
        stmt.bindLong(16, entity.getUnitPriceMoney_cent());
 
        String unitPriceMoney_currency = entity.getUnitPriceMoney_currency();
        if (unitPriceMoney_currency != null) {
            stmt.bindString(17, unitPriceMoney_currency);
        }
        stmt.bindDouble(18, entity.getUnitPriceMoney_amount());
 
        String unitPriceMoney_centFactor = entity.getUnitPriceMoney_centFactor();
        if (unitPriceMoney_centFactor != null) {
            stmt.bindString(19, unitPriceMoney_centFactor);
        }
        stmt.bindLong(20, entity.getSort());
        stmt.bindLong(21, entity.getHasChoose());
        stmt.bindLong(22, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(23, entity.getStatus());
 
        String templateId = entity.getTemplateId();
        if (templateId != null) {
            stmt.bindString(24, templateId);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(25, remark);
        }
 
        String inputGoodsInitPrice = entity.getInputGoodsInitPrice();
        if (inputGoodsInitPrice != null) {
            stmt.bindString(26, inputGoodsInitPrice);
        }
 
        String standardGoodsCount = entity.getStandardGoodsCount();
        if (standardGoodsCount != null) {
            stmt.bindString(27, standardGoodsCount);
        }
 
        String weightGoodsCount = entity.getWeightGoodsCount();
        if (weightGoodsCount != null) {
            stmt.bindString(28, weightGoodsCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FoodInfoTable entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tenantId = entity.getTenantId();
        if (tenantId != null) {
            stmt.bindString(2, tenantId);
        }
 
        String deleteFlag = entity.getDeleteFlag();
        if (deleteFlag != null) {
            stmt.bindString(3, deleteFlag);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(5, createUser);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(7, updateUser);
        }
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(8, restaurantId);
        }
 
        String categoryMap = entity.getCategoryMap();
        if (categoryMap != null) {
            stmt.bindString(9, categoryMap);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String imgpath = entity.getImgpath();
        if (imgpath != null) {
            stmt.bindString(11, imgpath);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(12, deviceId);
        }
        stmt.bindLong(13, entity.getPricingMethod());
 
        String pricingUnit = entity.getPricingUnit();
        if (pricingUnit != null) {
            stmt.bindString(14, pricingUnit);
        }
        stmt.bindLong(15, entity.getType());
        stmt.bindLong(16, entity.getUnitPriceMoney_cent());
 
        String unitPriceMoney_currency = entity.getUnitPriceMoney_currency();
        if (unitPriceMoney_currency != null) {
            stmt.bindString(17, unitPriceMoney_currency);
        }
        stmt.bindDouble(18, entity.getUnitPriceMoney_amount());
 
        String unitPriceMoney_centFactor = entity.getUnitPriceMoney_centFactor();
        if (unitPriceMoney_centFactor != null) {
            stmt.bindString(19, unitPriceMoney_centFactor);
        }
        stmt.bindLong(20, entity.getSort());
        stmt.bindLong(21, entity.getHasChoose());
        stmt.bindLong(22, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(23, entity.getStatus());
 
        String templateId = entity.getTemplateId();
        if (templateId != null) {
            stmt.bindString(24, templateId);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(25, remark);
        }
 
        String inputGoodsInitPrice = entity.getInputGoodsInitPrice();
        if (inputGoodsInitPrice != null) {
            stmt.bindString(26, inputGoodsInitPrice);
        }
 
        String standardGoodsCount = entity.getStandardGoodsCount();
        if (standardGoodsCount != null) {
            stmt.bindString(27, standardGoodsCount);
        }
 
        String weightGoodsCount = entity.getWeightGoodsCount();
        if (weightGoodsCount != null) {
            stmt.bindString(28, weightGoodsCount);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FoodInfoTable readEntity(Cursor cursor, int offset) {
        FoodInfoTable entity = new FoodInfoTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tenantId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deleteFlag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createUser
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updateUser
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // restaurantId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // categoryMap
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imgpath
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deviceId
            cursor.getInt(offset + 12), // pricingMethod
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pricingUnit
            cursor.getInt(offset + 14), // type
            cursor.getLong(offset + 15), // unitPriceMoney_cent
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // unitPriceMoney_currency
            cursor.getDouble(offset + 17), // unitPriceMoney_amount
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // unitPriceMoney_centFactor
            cursor.getInt(offset + 19), // sort
            cursor.getInt(offset + 20), // hasChoose
            cursor.getShort(offset + 21) != 0, // isSelected
            cursor.getInt(offset + 22), // status
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // templateId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // remark
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // inputGoodsInitPrice
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // standardGoodsCount
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // weightGoodsCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FoodInfoTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTenantId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeleteFlag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateUser(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateUser(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRestaurantId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategoryMap(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImgpath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeviceId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPricingMethod(cursor.getInt(offset + 12));
        entity.setPricingUnit(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType(cursor.getInt(offset + 14));
        entity.setUnitPriceMoney_cent(cursor.getLong(offset + 15));
        entity.setUnitPriceMoney_currency(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUnitPriceMoney_amount(cursor.getDouble(offset + 17));
        entity.setUnitPriceMoney_centFactor(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSort(cursor.getInt(offset + 19));
        entity.setHasChoose(cursor.getInt(offset + 20));
        entity.setIsSelected(cursor.getShort(offset + 21) != 0);
        entity.setStatus(cursor.getInt(offset + 22));
        entity.setTemplateId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRemark(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setInputGoodsInitPrice(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setStandardGoodsCount(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setWeightGoodsCount(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FoodInfoTable entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(FoodInfoTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FoodInfoTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
